{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/constants-d1abe7de.js","./node_modules/@aws-amplify/ui-components/dist/esm/amplify-federated-sign-in.entry.js","./node_modules/@aws-amplify/ui-components/dist/esm/auth-types-78df304e.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmlB;;;;;;;;;;;;;AChCnlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACb;AACQ;AACjB;AAC2B;;AAEpE,mBAAmB,+DAAa;AAChC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,yBAAyB,yDAAS;AAClC;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA,eAAe,WAAW,EAAE,GAAG,sDAAI;AACnC;AACA;AACA,wEAAwE;AACxE;AACA;AACA,wEAAwE;AACxE;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAwD;AAC7F;AACA;AACA,2BAA2B,yDAAS;AACpC;AACA;AACA;AACA,gBAAgB,4DAAC,0BAA0B,2CAA2C,EAAE,4DAAC,qBAAqB,gDAAgD,EAAE,4DAAC,+BAA+B,iGAAiG;AACjS;AACA;;AAE+D;;;;;;;;;;;;;AC7C/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAE+D","file":"9.js","sourcesContent":["// Dictionaries\n// fieldId constants\nconst USERNAME_SUFFIX = 'username';\nconst EMAIL_SUFFIX = 'email';\nconst CODE_SUFFIX = 'code';\nconst PHONE_SUFFIX = 'phone';\nconst PASSWORD_SUFFIX = 'password';\n// Country Dial Code common constants\nconst COUNTRY_DIAL_CODE_SUFFIX = 'country-dial-code-select';\nconst COUNTRY_DIAL_CODE_DEFAULT = '+1';\n// Auth Keys\nconst AUTH_SOURCE_KEY = 'amplify-auth-source';\nconst REDIRECTED_FROM_HOSTED_UI = 'amplify-redirected-from-hosted-ui';\nconst AUTHENTICATOR_AUTHSTATE = 'amplify-authenticator-authState';\n// Error message Common Constants\nconst PHONE_EMPTY_ERROR_MESSAGE = 'Phone number can not be empty';\nconst NO_AUTH_MODULE_FOUND = 'No Auth module found, please ensure @aws-amplify/auth is imported';\nconst NO_STORAGE_MODULE_FOUND = 'No Storage module found, please ensure @aws-amplify/storage is imported';\nconst NO_INTERACTIONS_MODULE_FOUND = 'No Interactions module found, please ensure @aws-amplify/interactions is imported';\n// TOTP Messages\nconst SETUP_TOTP = 'SETUP_TOTP';\n// Select MFA Types Messages\nconst USER_NOT_SETUP_SOFTWARE_TOKEN_MFA = 'User has not set up software token mfa';\nconst USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA = 'User has not verified software token mfa';\n// Common events\nconst SUCCESS = 'SUCCESS';\n// Hub Events and Channels\nconst AUTH_CHANNEL = 'auth';\nconst UI_AUTH_CHANNEL = 'UI Auth';\nconst TOAST_AUTH_ERROR_EVENT = 'ToastAuthError';\nconst AUTH_STATE_CHANGE_EVENT = 'AuthStateChange';\n\nexport { AUTH_CHANNEL as A, COUNTRY_DIAL_CODE_SUFFIX as C, EMAIL_SUFFIX as E, NO_AUTH_MODULE_FOUND as N, PHONE_EMPTY_ERROR_MESSAGE as P, REDIRECTED_FROM_HOSTED_UI as R, SETUP_TOTP as S, TOAST_AUTH_ERROR_EVENT as T, UI_AUTH_CHANNEL as U, AUTH_STATE_CHANGE_EVENT as a, PHONE_SUFFIX as b, AUTHENTICATOR_AUTHSTATE as c, NO_INTERACTIONS_MODULE_FOUND as d, NO_STORAGE_MODULE_FOUND as e, USER_NOT_SETUP_SOFTWARE_TOKEN_MFA as f, USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA as g, COUNTRY_DIAL_CODE_DEFAULT as h, SUCCESS as i, AUTH_SOURCE_KEY as j, CODE_SUFFIX as k, PASSWORD_SUFFIX as l, USERNAME_SUFFIX as m };\n","import { r as registerInstance, h } from './index-3fb5c139.js';\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-d1abe7de.js';\n\nconst logger = new ConsoleLogger('amplify-federated-sign-in');\nconst AmplifyFederatedSignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The current authentication state. */\n        this.authState = AuthState.SignIn;\n        /** Federated credentials & configuration. */\n        this.federated = {};\n    }\n    componentWillLoad() {\n        if (!Auth || typeof Auth.configure !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        const { oauth = {} } = Auth.configure();\n        // backward compatibility\n        if (oauth['domain']) {\n            this.federated.oauth_config = Object.assign(Object.assign({}, this.federated.oauth_config), oauth);\n        }\n        else if (oauth['awsCognito']) {\n            this.federated.oauth_config = Object.assign(Object.assign({}, this.federated.oauth_config), oauth['awsCognito']);\n        }\n        if (oauth['auth0']) {\n            this.federated.auth0 = Object.assign(Object.assign({}, this.federated.auth0), oauth['auth0']);\n        }\n    }\n    render() {\n        if (!this.federated) {\n            logger.debug('federated prop is empty. show nothing');\n            logger.debug('federated={google_client_id: , facebook_app_id: , amazon_client_id}');\n            return null;\n        }\n        if (!Object.values(AuthState).includes(this.authState)) {\n            return null;\n        }\n        logger.debug('federated Config is', this.federated);\n        return (h(\"amplify-form-section\", { \"data-test\": \"federated-sign-in-section\" }, h(\"amplify-section\", { \"data-test\": \"federated-sign-in-body-section\" }, h(\"amplify-federated-buttons\", { authState: this.authState, \"data-test\": \"federated-sign-in-buttons\", federated: this.federated }))));\n    }\n};\n\nexport { AmplifyFederatedSignIn as amplify_federated_sign_in };\n","// TODO: Move these values to or extract them from the Cognito Provider in the Auth category for Auth V2\nvar AuthState;\n(function (AuthState) {\n    AuthState[\"SignUp\"] = \"signup\";\n    AuthState[\"SignOut\"] = \"signout\";\n    AuthState[\"SignIn\"] = \"signin\";\n    AuthState[\"Loading\"] = \"loading\";\n    AuthState[\"SignedOut\"] = \"signedout\";\n    AuthState[\"SignedIn\"] = \"signedin\";\n    AuthState[\"SigningUp\"] = \"signingup\";\n    AuthState[\"ConfirmSignUp\"] = \"confirmSignUp\";\n    AuthState[\"confirmingSignUpCustomFlow\"] = \"confirmsignupcustomflow\";\n    AuthState[\"ConfirmSignIn\"] = \"confirmSignIn\";\n    AuthState[\"confirmingSignInCustomFlow\"] = \"confirmingsignincustomflow\";\n    AuthState[\"VerifyingAttributes\"] = \"verifyingattributes\";\n    AuthState[\"ForgotPassword\"] = \"forgotpassword\";\n    AuthState[\"ResetPassword\"] = \"resettingpassword\";\n    AuthState[\"SettingMFA\"] = \"settingMFA\";\n    AuthState[\"TOTPSetup\"] = \"TOTPSetup\";\n    AuthState[\"CustomConfirmSignIn\"] = \"customConfirmSignIn\";\n    AuthState[\"VerifyContact\"] = \"verifyContact\";\n})(AuthState || (AuthState = {}));\nvar MfaOption;\n(function (MfaOption) {\n    MfaOption[\"TOTP\"] = \"TOTP\";\n    MfaOption[\"SMS\"] = \"SMS\";\n    MfaOption[\"NOMFA\"] = \"NOMFA\";\n})(MfaOption || (MfaOption = {}));\nvar ChallengeName;\n(function (ChallengeName) {\n    ChallengeName[\"SoftwareTokenMFA\"] = \"SOFTWARE_TOKEN_MFA\";\n    ChallengeName[\"SMSMFA\"] = \"SMS_MFA\";\n    ChallengeName[\"NewPasswordRequired\"] = \"NEW_PASSWORD_REQUIRED\";\n    ChallengeName[\"MFASetup\"] = \"MFA_SETUP\";\n    ChallengeName[\"CustomChallenge\"] = \"CUSTOM_CHALLENGE\";\n})(ChallengeName || (ChallengeName = {}));\nvar AuthFormField;\n(function (AuthFormField) {\n    AuthFormField[\"Password\"] = \"password\";\n})(AuthFormField || (AuthFormField = {}));\nvar UsernameAlias;\n(function (UsernameAlias) {\n    UsernameAlias[\"username\"] = \"username\";\n    UsernameAlias[\"email\"] = \"email\";\n    UsernameAlias[\"phone_number\"] = \"phone_number\";\n})(UsernameAlias || (UsernameAlias = {}));\n\nexport { AuthState as A, ChallengeName as C, MfaOption as M, UsernameAlias as U, AuthFormField as a };\n"],"sourceRoot":"webpack:///"}
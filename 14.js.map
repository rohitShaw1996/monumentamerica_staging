{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-authenticator.entry.js"],"names":[],"mappings":"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","file":"14.js","sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-3fb5c139.js';\nimport { Logger, Hub } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { appendToCognitoUserAgent, Auth } from '@aws-amplify/auth';\nimport './Translations-c833f663.js';\nimport { T as TOAST_AUTH_ERROR_EVENT, U as UI_AUTH_CHANNEL, A as AUTH_CHANNEL, R as REDIRECTED_FROM_HOSTED_UI, N as NO_AUTH_MODULE_FOUND, c as AUTHENTICATOR_AUTHSTATE } from './constants-d1abe7de.js';\nimport { d as dispatchAuthStateChangeEvent, o as onAuthUIStateChange } from './helpers-4afef5ab.js';\nimport { c as checkContact } from './auth-helpers-99c6a1db.js';\n\nconst authSlotNames = {\n    [AuthState.SignIn]: 'sign-in',\n    [AuthState.ConfirmSignIn]: 'confirm-sign-in',\n    [AuthState.SignUp]: 'sign-up',\n    [AuthState.ConfirmSignUp]: 'confirm-sign-up',\n    [AuthState.ForgotPassword]: 'forgot-password',\n    [AuthState.ResetPassword]: 'require-new-password',\n    [AuthState.VerifyContact]: 'verify-contact',\n    [AuthState.TOTPSetup]: 'totp-setup',\n    [AuthState.Loading]: 'loading',\n};\n\nconst amplifyAuthenticatorCss = \":host{--background-color:var(--amplify-background-color);--width:28.75rem;--min-width:20rem;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;--box-shadow:1px 1px 4px 0 rgba(0, 0, 0, 0.15);--border-radius:6px;--padding:35px 40px;--margin-bottom:20px;--container-height:100vh;--container-display:flex;--container-justify:center;--container-align:center}.auth-container{display:var(--container-display);-ms-flex-pack:var(--container-justify);justify-content:var(--container-justify);-ms-flex-align:var(--container-align);align-items:var(--container-align);min-height:var(--container-height)}\";\n\nconst logger = new Logger('Authenticator');\nconst AmplifyAuthenticator = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Initial starting state of the Authenticator component. E.g. If `signup` is passed the default component is set to AmplifySignUp */\n        this.initialAuthState = AuthState.SignIn;\n        /** Callback for Authenticator state machine changes */\n        this.handleAuthStateChange = () => { };\n        /** Hide amplify-toast for auth errors */\n        this.hideToast = false;\n        this.authState = AuthState.Loading;\n        this.toastMessage = '';\n        this.handleExternalAuthEvent = ({ payload }) => {\n            switch (payload.event) {\n                case 'cognitoHostedUI':\n                case 'signIn':\n                    checkContact(payload.data, dispatchAuthStateChangeEvent);\n                    break;\n                case 'cognitoHostedUI_failure':\n                case 'parsingUrl_failure':\n                case 'signOut':\n                case 'customGreetingSignOut':\n                    return dispatchAuthStateChangeEvent(this.initialAuthState);\n            }\n        };\n        this.handleToastEvent = ({ payload }) => {\n            switch (payload.event) {\n                case TOAST_AUTH_ERROR_EVENT:\n                    if (payload.message)\n                        this.toastMessage = payload.message;\n                    break;\n            }\n        };\n    }\n    async componentWillLoad() {\n        onAuthUIStateChange((authState, authData) => {\n            this.onAuthStateChange(authState, authData);\n            this.toastMessage = '';\n        });\n        if (!this.hideToast)\n            Hub.listen(UI_AUTH_CHANNEL, this.handleToastEvent);\n        Hub.listen(AUTH_CHANNEL, this.handleExternalAuthEvent);\n        appendToCognitoUserAgent('amplify-authenticator');\n        const byHostedUI = localStorage.getItem(REDIRECTED_FROM_HOSTED_UI);\n        localStorage.removeItem(REDIRECTED_FROM_HOSTED_UI);\n        if (byHostedUI !== 'true')\n            await this.checkUser();\n    }\n    async checkUser() {\n        if (!Auth || typeof Auth.currentAuthenticatedUser !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        return Auth.currentAuthenticatedUser()\n            .then(user => {\n            dispatchAuthStateChangeEvent(AuthState.SignedIn, user);\n        })\n            .catch(async () => {\n            let cachedAuthState = null;\n            try {\n                cachedAuthState = localStorage.getItem(AUTHENTICATOR_AUTHSTATE);\n            }\n            catch (error) {\n                logger.debug('Failed to get the auth state from local storage', error);\n            }\n            try {\n                if (cachedAuthState === AuthState.SignedIn) {\n                    await Auth.signOut();\n                }\n                dispatchAuthStateChangeEvent(this.initialAuthState);\n            }\n            catch (error) {\n                logger.debug('Failed to sign out', error);\n            }\n        });\n    }\n    async onAuthStateChange(nextAuthState, data) {\n        if (nextAuthState === undefined)\n            return logger.error('nextAuthState cannot be undefined');\n        logger.info('Inside onAuthStateChange Method current authState:', this.authState);\n        if (nextAuthState === AuthState.SignedOut) {\n            this.authState = this.initialAuthState;\n        }\n        else {\n            this.authState = nextAuthState;\n        }\n        this.authData = data;\n        if (this.authData)\n            logger.log('Auth Data was set:', this.authData);\n        if (this.authState === nextAuthState) {\n            this.handleAuthStateChange(this.authState, this.authData);\n            logger.info(`authState has been updated to ${this.authState}`);\n        }\n    }\n    // Returns the auth component corresponding to the given authState.\n    getAuthComponent(authState) {\n        switch (authState) {\n            case AuthState.SignIn:\n                return h(\"amplify-sign-in\", { federated: this.federated, usernameAlias: this.usernameAlias });\n            case AuthState.ConfirmSignIn:\n                return h(\"amplify-confirm-sign-in\", { user: this.authData });\n            case AuthState.SignUp:\n                return h(\"amplify-sign-up\", { usernameAlias: this.usernameAlias });\n            case AuthState.ConfirmSignUp:\n                return h(\"amplify-confirm-sign-up\", { user: this.authData, usernameAlias: this.usernameAlias });\n            case AuthState.ForgotPassword:\n                return h(\"amplify-forgot-password\", { usernameAlias: this.usernameAlias });\n            case AuthState.ResetPassword:\n                return h(\"amplify-require-new-password\", { user: this.authData });\n            case AuthState.VerifyContact:\n                return h(\"amplify-verify-contact\", { user: this.authData });\n            case AuthState.TOTPSetup:\n                return h(\"amplify-totp-setup\", { user: this.authData });\n            case AuthState.Loading:\n                return h(\"div\", null, \"Loading...\");\n            default:\n                throw new Error(`Unhandled auth state: ${authState}`);\n        }\n    }\n    // Returns a slot containing the Auth component corresponding to the given authState\n    getSlotWithAuthComponent(authState) {\n        const authComponent = this.getAuthComponent(authState);\n        const slotName = authSlotNames[authState];\n        const slotIsEmpty = this.el.querySelector(`[slot=\"${slotName}\"]`) === null; // true if no element has been inserted to the slot\n        /**\n         * Connect the inner auth component to DOM only if the slot hasn't been overwritten. This prevents\n         * the overwritten component from calling its lifecycle methods.\n         */\n        return h(\"slot\", { name: slotName }, slotIsEmpty && authComponent);\n    }\n    componentWillUnload() {\n        Hub.remove(AUTH_CHANNEL, this.handleExternalAuthEvent);\n        if (!this.hideToast)\n            Hub.remove(UI_AUTH_CHANNEL, this.handleToastEvent);\n        return onAuthUIStateChange;\n    }\n    render() {\n        return (h(Host, null, !this.hideToast && this.toastMessage && (h(\"amplify-toast\", { message: this.toastMessage, handleClose: () => {\n                this.toastMessage = '';\n            }, \"data-test\": \"authenticator-error\" })), this.authState === AuthState.SignedIn ? ([h(\"slot\", { name: \"greetings\" }), h(\"slot\", null)]) : (h(\"div\", { class: \"auth-container\" }, this.getSlotWithAuthComponent(this.authState)))));\n    }\n    get el() { return getElement(this); }\n};\nAmplifyAuthenticator.style = amplifyAuthenticatorCss;\n\nexport { AmplifyAuthenticator as amplify_authenticator };\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/storage-types-f257c0f2.js","./node_modules/@aws-amplify/ui-components/dist/esm/storage-helpers-48c373a0.js","./node_modules/@aws-amplify/ui-components/dist/esm/auth-helpers-99c6a1db.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEP;;;;;;;;;;;;;ACP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACxB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4DAAO,WAAW,4DAAO;AAClC,wBAAwB,wDAAuB;AAC/C;AACA;AACA,0BAA0B,4DAAO,WAAW,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS,4DAAO,WAAW,4DAAO;AAClC,wBAAwB,wDAAuB;AAC/C;AACA;AACA,8BAA8B,4DAAO;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4DAAO,WAAW,4DAAO;AAClC,wBAAwB,wDAAuB;AAC/C;AACA;AACA,2BAA2B,4DAAO;AAClC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAE8G;;;;;;;;;;;;;ACrG9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AAC0B;AACxB;AACS;AACK;AACD;;AAEnE,mBAAmB,wDAAM;AACzB;AACA,SAAS,sDAAI,WAAW,sDAAI;AAC5B,wBAAwB,wDAAoB;AAC5C;AACA;AACA;AACA;AACA,8BAA8B,yDAAS;AACvC;AACA;AACA;AACA,2BAA2B,sDAAI;AAC/B,aAAa,iEAAO,mBAAmB,iEAAO;AAC9C,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA,QAAQ,8DAAqB;AAC7B;AACA;AACA;AACA,SAAS,sDAAI,WAAW,sDAAI;AAC5B,wBAAwB,wDAAoB;AAC5C;AACA;AACA,2BAA2B,sDAAI;AAC/B;AACA,mCAAmC,yDAAa,kCAAkC,yDAAa;AAC/F;AACA,kCAAkC,yDAAS;AAC3C;AACA,wCAAwC,yDAAa;AACrD;AACA,kCAAkC,yDAAS;AAC3C;AACA,wCAAwC,yDAAa;AACrD;AACA,kCAAkC,yDAAS;AAC3C;AACA,wCAAwC,yDAAa;AACrD;AACA;AACA;AACA,kCAAkC,yDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yDAAS,iBAAiB,WAAW;AACvE;AACA;AACA;AACA,kCAAkC,yDAAS,kBAAkB,WAAW;AACxE;AACA;AACA;AACA,4BAA4B,2DAAY;AACxC;AACA,QAAQ,8DAAqB;AAC7B;AACA;AACA;AACA,2BAA2B,6DAAW;AACtC;;AAEgD","file":"common.js","sourcesContent":["var AccessLevel;\n(function (AccessLevel) {\n    AccessLevel[\"Public\"] = \"public\";\n    AccessLevel[\"Private\"] = \"private\";\n    AccessLevel[\"Protected\"] = \"protected\";\n})(AccessLevel || (AccessLevel = {}));\n\nexport { AccessLevel as A };\n","import { e as NO_STORAGE_MODULE_FOUND } from './constants-d1abe7de.js';\nimport { Storage } from '@aws-amplify/storage';\n\nconst imageFileType = new Set([\n    'apng',\n    'bmp',\n    'gif',\n    'ico',\n    'cur',\n    'jpg',\n    'jpeg',\n    'jfif',\n    'pjpeg',\n    'pjp',\n    'png',\n    'svg',\n    'tif',\n    'tiff',\n    'webp',\n]);\nconst calcKey = (file, fileToKey) => {\n    const { name, size, type } = file;\n    let key = encodeURI(name);\n    if (fileToKey) {\n        if (typeof fileToKey === 'string') {\n            key = fileToKey;\n        }\n        else if (typeof fileToKey === 'function') {\n            key = fileToKey({ name, size, type });\n        }\n        else {\n            key = encodeURI(JSON.stringify(fileToKey));\n        }\n        if (!key) {\n            key = 'empty_key';\n        }\n    }\n    return key.replace(/\\s/g, '_');\n};\nconst getStorageObject = async (key, level, track, identityId, logger) => {\n    if (!Storage || typeof Storage.get !== 'function') {\n        throw new Error(NO_STORAGE_MODULE_FOUND);\n    }\n    try {\n        const src = await Storage.get(key, { level, track, identityId });\n        logger.debug('Storage image get', src);\n        return src;\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n};\nconst readFileAsync = (blob) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = () => {\n            reject('Failed to read file!');\n            reader.abort();\n        };\n        reader.readAsText(blob);\n    });\n};\nconst getTextSource = async (key, level, track, identityId, logger) => {\n    if (!Storage || typeof Storage.get !== 'function') {\n        throw new Error(NO_STORAGE_MODULE_FOUND);\n    }\n    try {\n        const textSrc = await Storage.get(key, {\n            download: true,\n            level,\n            track,\n            identityId,\n        });\n        logger.debug(textSrc);\n        const text = (await readFileAsync(textSrc['Body']));\n        return text;\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n};\nconst putStorageObject = async (key, body, level, track, contentType, logger) => {\n    if (!Storage || typeof Storage.put !== 'function') {\n        throw new Error(NO_STORAGE_MODULE_FOUND);\n    }\n    try {\n        const data = await Storage.put(key, body, {\n            contentType,\n            level,\n            track,\n        });\n        logger.debug('Upload data', data);\n    }\n    catch (error) {\n        throw new Error(error);\n    }\n};\n\nexport { getTextSource as a, calcKey as c, getStorageObject as g, imageFileType as i, putStorageObject as p };\n","import { Logger, isEmpty } from '@aws-amplify/core';\nimport { A as AuthState, C as ChallengeName } from './auth-types-78df304e.js';\nimport { Auth, CognitoUser } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-d1abe7de.js';\nimport { a as dispatchToastHubEvent } from './helpers-4afef5ab.js';\n\nconst logger = new Logger('auth-helpers');\nasync function checkContact(user, handleAuthStateChange) {\n    if (!Auth || typeof Auth.verifiedContact !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    // If `user` is a federated user, we shouldn't call `verifiedContact`\n    // since `user` isn't `CognitoUser`\n    if (!isCognitoUser(user)) {\n        handleAuthStateChange(AuthState.SignedIn, user);\n        return;\n    }\n    try {\n        const data = await Auth.verifiedContact(user);\n        if (!isEmpty(data.verified) || isEmpty(data.unverified)) {\n            handleAuthStateChange(AuthState.SignedIn, user);\n        }\n        else {\n            const newUser = Object.assign(user, data);\n            handleAuthStateChange(AuthState.VerifyContact, newUser);\n        }\n    }\n    catch (error) {\n        dispatchToastHubEvent(error);\n    }\n}\nconst handleSignIn = async (username, password, handleAuthStateChange) => {\n    if (!Auth || typeof Auth.signIn !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    try {\n        const user = await Auth.signIn(username, password);\n        logger.debug(user);\n        if (user.challengeName === ChallengeName.SMSMFA || user.challengeName === ChallengeName.SoftwareTokenMFA) {\n            logger.debug('confirm user with ' + user.challengeName);\n            handleAuthStateChange(AuthState.ConfirmSignIn, user);\n        }\n        else if (user.challengeName === ChallengeName.NewPasswordRequired) {\n            logger.debug('require new password', user.challengeParam);\n            handleAuthStateChange(AuthState.ResetPassword, user);\n        }\n        else if (user.challengeName === ChallengeName.MFASetup) {\n            logger.debug('TOTP setup', user.challengeParam);\n            handleAuthStateChange(AuthState.TOTPSetup, user);\n        }\n        else if (user.challengeName === ChallengeName.CustomChallenge &&\n            user.challengeParam &&\n            user.challengeParam.trigger === 'true') {\n            logger.debug('custom challenge', user.challengeParam);\n            handleAuthStateChange(AuthState.CustomConfirmSignIn, user);\n        }\n        else {\n            await checkContact(user, handleAuthStateChange);\n        }\n    }\n    catch (error) {\n        if (error.code === 'UserNotConfirmedException') {\n            logger.debug('the user is not confirmed');\n            handleAuthStateChange(AuthState.ConfirmSignUp, { username });\n        }\n        else if (error.code === 'PasswordResetRequiredException') {\n            logger.debug('the user requires a new password');\n            handleAuthStateChange(AuthState.ForgotPassword, { username });\n        }\n        else if (error.code === 'InvalidParameterException' && password === '') {\n            logger.debug('Password cannot be empty');\n            error.message = Translations.EMPTY_PASSWORD;\n        }\n        dispatchToastHubEvent(error);\n    }\n};\nconst isCognitoUser = (user) => {\n    return user instanceof CognitoUser;\n};\n\nexport { checkContact as c, handleSignIn as h };\n"],"sourceRoot":"webpack:///"}
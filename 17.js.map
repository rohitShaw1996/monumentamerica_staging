{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-confirm-sign-in_7.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0E;AACD;AACyC;AACzE;AACsB;AACqC;AACwI;AAC1J;;AAElF;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA,gCAAgC,2DAAY;AAC5C;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yBAAyB,yDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yDAAa;AACrE,6BAA6B,yDAAS;AACtC;AACA,oCAAoC,2DAAY;AAChD,kCAAkC,2DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yDAAa,oBAAoB,yDAAa;AACrG,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,kBAAkB,sDAAI;AACtB,kBAAkB,mEAAY;AAC9B;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,0EAA0E,sDAAI,4EAA4E,4DAAC,eAAe,4DAAC,oBAAoB,8DAA8D,yDAAS,UAAU,EAAE,sDAAI,KAAK,2DAAY,qBAAqB,EAAE,4DAAC,yBAAyB,8BAA8B;AAChc;AACA,2BAA2B;AAC3B;AACA,MAAM;AACN;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA,sEAAsE,mBAAmB;AACzF;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,sDAAI,KAAK,2DAAY;AAC5C,6BAA6B,sDAAI,KAAK,2DAAY;AAClD;AACA,uBAAuB,4DAAC,cAAc,sDAAI,KAAK,2DAAY,kCAAkC,4DAAC,oBAAoB,6DAA6D,EAAE,sDAAI,KAAK,2DAAY;AACtM;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,uCAAuC,8DAAW,cAAc,4DAAC,cAAc,sDAAI,KAAK,2DAAY,kCAAkC,4DAAC,oBAAoB,6DAA6D,EAAE,sDAAI,KAAK,2DAAY;AAC/O;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA,kBAAkB,sDAAI;AACtB,uCAAuC,yDAAS;AAChD;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,qCAAqC,8DAAuB;AAC5D;AACA;AACA,oBAAoB,8DAAqB;AACzC;AACA;AACA;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA,8CAA8C,sDAAI;AAClD;AACA,gCAAgC,sDAAI,KAAK,2DAAY;AACrD;AACA;AACA;AACA,sBAAsB,mEAAY;AAClC;AACA;AACA,2CAA2C,yDAAS;AACpD;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,yCAAyC,sDAAI,6GAA6G,4DAAC,cAAc,4DAAC,eAAe,4DAAC,oBAAoB,8DAA8D,yDAAS,UAAU,EAAE,sDAAI,KAAK,2DAAY,sBAAsB,EAAE,4DAAC,yBAAyB,iCAAiC;AACnd;AACA,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN;;AAEA,mBAAmB,wDAAM;AACzB;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,0BAA0B,2DAAY;AACtC;AACA,8BAA8B,2DAAY;AAC1C;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,yDAAyD,8DAAuB;AAChF;AACA;AACA,oBAAoB,8DAAqB;AACzC;AACA;AACA;AACA;AACA,+BAA+B,sDAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,sDAAI,KAAK,2DAAY;AAChD,iCAAiC,sDAAI,KAAK,2DAAY;AACtD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,+BAA+B,sDAAI;AACnC;AACA,uCAAuC,yDAAS;AAChD;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,8FAA8F,4DAAC,oBAAoB,8DAA8D,yDAAS,+DAA+D,EAAE,sDAAI,KAAK,2DAAY,yEAAyE,sDAAI,wBAAwB,EAAE,4DAAC,yBAAyB,iCAAiC;AAC5f;AACA,2BAA2B;AAC3B;AACA,MAAM;AACN;;AAEA,qBAAqB,+DAAa;AAClC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,0BAA0B,2DAAY;AACtC;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA,sBAAsB,yDAAa;AACnC;AACA;AACA,uBAAuB,sDAAI,KAAK,2DAAY;AAC5C,6BAA6B,sDAAI,KAAK,2DAAY;AAClD;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAI;AACvC;AACA;AACA;AACA;AACA,gBAAgB,8DAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8DAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,+BAA+B,sDAAI;AACnC;AACA;AACA,qBAAqB,yDAAa;AAClC,+CAA+C,yDAAS;AACxD;AACA,qBAAqB,yDAAa;AAClC;AACA,+CAA+C,yDAAS;AACxD;AACA;AACA,0BAA0B,mEAAY;AACtC;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,uGAAuG,4DAAC,oBAAoB,8DAA8D,yDAAS,UAAU,EAAE,sDAAI,KAAK,2DAAY,sCAAsC,sDAAI,6BAA6B,EAAE,4DAAC,yBAAyB,iCAAiC;AAClb;AACA,2BAA2B;AAC3B;AACA,MAAM;AACN;;AAEA,gCAAgC,qCAAqC,mCAAmC,gDAAgD,yCAAyC,qBAAqB,sCAAsC,6BAA6B,0BAA0B,0BAA0B,oBAAoB,aAAa,kCAAkC,8BAA8B,sBAAsB,mBAAmB,yBAAyB,6BAA6B,oCAAoC,uBAAuB,0BAA0B,qBAAqB,oBAAoB,aAAa,uBAAuB,mBAAmB,sBAAsB,8BAA8B,wBAAwB,qBAAqB,oCAAoC,iBAAiB,yBAAyB,mBAAmB;;AAEp4B;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA,gCAAgC,2DAAY;AAC5C;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8DAAuB;AAC7E;AACA;AACA,oBAAoB,8DAAqB;AACzC;AACA;AACA;AACA,cAAc,mEAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB,4DAAC,cAAc,sDAAI,KAAK,2DAAY,6BAA6B,4DAAC,oBAAoB,8DAA8D,yDAAS,+DAA+D,EAAE,sDAAI,KAAK,2DAAY;AACtQ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,uCAAuC,8DAAW,cAAc,4DAAC,cAAc,sDAAI,KAAK,2DAAY,6BAA6B,4DAAC,oBAAoB,8DAA8D,yDAAS,+DAA+D,EAAE,sDAAI,KAAK,2DAAY;AACnT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,mFAAmF,EAAE,4DAAC,SAAS,mBAAmB,EAAE,4DAAC,UAAU,0BAA0B,IAAI,4DAAC,UAAU,4BAA4B,EAAE,4DAAC,+BAA+B,+EAA+E,KAAK,iEAAO,oBAAoB,4DAAC,gCAAgC,4DAAC,yBAAyB,iCAAiC,GAAG,4DAAC,SAAS,oEAAoE,EAAE,4DAAC,UAAU,iBAAiB,EAAE,4DAAC,UAAU,mCAAmC,sBAAsB,4DAAC,eAAe,sDAAI,KAAK,2DAAY,wBAAwB,4DAAC,oBAAoB,8DAA8D,yDAAS,sDAAsD,EAAE,sDAAI,KAAK,2DAAY,4BAA4B,4DAAC,kBAAkB,4DAAC,UAAU,iCAAiC,EAAE,4DAAC,oBAAoB,gFAAgF,iBAAiB,4DAAC,oCAAoC,4DAAC,eAAe,sDAAI;AAClqC;AACA,2BAA2B;AAC3B;AACA,MAAM;AACN;AACA;;AAEA,gCAAgC,gDAAgD,0CAA0C,mCAAmC,yCAAyC,qBAAqB,sCAAsC,kCAAkC,0BAA0B,0BAA0B,oBAAoB,aAAa,kCAAkC,8BAA8B,sBAAsB,mBAAmB,yBAAyB,6BAA6B,oCAAoC,uBAAuB,0BAA0B,qBAAqB,oBAAoB,aAAa,uBAAuB,mBAAmB,sBAAsB,8BAA8B,wBAAwB,qBAAqB,oCAAoC,iBAAiB,yBAAyB,mBAAmB;;AAE94B;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA,gCAAgC,2DAAY;AAC5C;AACA,+BAA+B,2DAAY;AAC3C;AACA,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA;AACA,gEAAgE,8DAAuB;AACvF;AACA;AACA,gBAAgB,8DAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA,+BAA+B,sDAAI;AACnC;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA,sBAAsB,mEAAY;AAClC;AACA;AACA,oDAAoD;AACpD,2CAA2C,yDAAS,8CAA8C,eAAe,cAAc;AAC/H;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,aAAa,sDAAI,mFAAmF,EAAE,4DAAC,SAAS,mBAAmB,EAAE,4DAAC,UAAU,0BAA0B,IAAI,4DAAC,yBAAyB,iCAAiC,GAAG,4DAAC,SAAS,oEAAoE,EAAE,4DAAC,UAAU,iBAAiB,EAAE,4DAAC,UAAU,mCAAmC,EAAE,4DAAC,eAAe,sDAAI,iCAAiC,4DAAC,oBAAoB,8DAA8D,yDAAS,+CAA+C,EAAE,sDAAI,0BAA0B,4DAAC,UAAU,iCAAiC,EAAE,4DAAC,oBAAoB,+DAA+D,iBAAiB,4DAAC,oCAAoC,4DAAC,eAAe,sDAAI;AAC/2B;AACA,2BAA2B;AAC3B;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,wDAAM;AAC3B;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,+BAA+B,sDAAI;AACnC;AACA,uCAAuC,yDAAS;AAChD;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,+BAA+B,sDAAI;AACnC;AACA;AACA;AACA;AACA,YAAY,8DAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,cAAc,4DAAC,mBAAmB;AACnD;AACA;AACA,aAAa,6BAA6B,sDAAI,KAAK,2DAAY,+EAA+E;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,gBAAgB,4DAAC,wBAAwB,4DAAC,0BAA0B,QAAQ,sDAAI,KAAK,2DAAY;AACjG;AACA,aAAa,EAAE,qBAAqB,4DAAC,0BAA0B,QAAQ,sDAAI,KAAK,2DAAY;AAC5F;AACA,aAAa,EAAE;AACf;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,QAAQ,4DAAC,0BAA0B,8DAA8D,sDAAI,KAAK,2DAAY,6EAA6E,4DAAC,eAAe,4DAAC,oBAAoB,8DAA8D,yDAAS,gEAAgE;AACrY,kBAAkB,sDAAI,KAAK,2DAAY;AACvC,kBAAkB,sDAAI,KAAK,2DAAY,+BAA+B;AACtE;AACA;;AAE6U","file":"17.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-3fb5c139.js';\nimport { I18n, Logger, ConsoleLogger, isEmpty } from '@aws-amplify/core';\nimport { M as MfaOption, C as ChallengeName, A as AuthState, a as AuthFormField } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, h as COUNTRY_DIAL_CODE_DEFAULT } from './constants-d1abe7de.js';\nimport { d as dispatchAuthStateChangeEvent, a as dispatchToastHubEvent, c as checkUsernameAlias, i as isHintValid, h as handlePhoneNumberChange, b as composePhoneNumberInput, g as getRequiredAttributesMap } from './helpers-4afef5ab.js';\nimport { c as checkContact, h as handleSignIn } from './auth-helpers-99c6a1db.js';\n\nconst AmplifyConfirmSignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when confirm sign in form is submitted */\n        this.handleSubmit = event => this.confirm(event);\n        /** Used for header text in confirm sign in component */\n        this.headerText = Translations.CONFIRM_SMS_CODE;\n        /** Used for the submit button text in confirm sign in component */\n        this.submitButtonText = Translations.CONFIRM;\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [\n            {\n                type: 'code',\n                required: true,\n                handleInputChange: event => this.handleCodeChange(event),\n            },\n        ];\n        /** The MFA option to confirm with */\n        this.mfaOption = MfaOption.SMS;\n        /* Whether or not the confirm-sign-in component is loading */\n        this.loading = false;\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        if (this.user && this.user['challengeName'] === ChallengeName.SoftwareTokenMFA) {\n            this.mfaOption = MfaOption.TOTP;\n            // If header text is using default use TOTP string\n            if (this.headerText === Translations.CONFIRM_SMS_CODE) {\n                this.headerText = Translations.CONFIRM_TOTP_CODE;\n            }\n        }\n    }\n    handleCodeChange(event) {\n        this.code = event.target.value;\n    }\n    async confirm(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        const mfaType = this.user['challengeName'] === ChallengeName.SoftwareTokenMFA ? ChallengeName.SoftwareTokenMFA : null;\n        if (!Auth || typeof Auth.confirmSignIn !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            await Auth.confirmSignIn(this.user, this.code, mfaType);\n            await checkContact(this.user, this.handleAuthStateChange);\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, submitButtonText: I18n.get(this.submitButtonText), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN))) }, h(\"amplify-auth-fields\", { formFields: this.formFields }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst AmplifyConfirmSignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.confirmSignUp(event);\n        /** Used for header text in confirm sign up component */\n        this.headerText = Translations.CONFIRM_SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in confirm sign up component */\n        this.submitButtonText = Translations.CONFIRM_SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this components\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.loading = false;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n    }\n    componentWillLoad() {\n        this.setup();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    userHandler() {\n        this.setup();\n    }\n    setup() {\n        // TODO: Use optional chaining instead\n        this.userInput = this.user && this.user.username;\n        this._signUpAttrs = this.user && this.user.signUpAttrs;\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    buildDefaultFormFields() {\n        this.newFormFields = [\n            {\n                type: `${this.usernameAlias}`,\n                required: true,\n                handleInputChange: this.handleFormFieldInputChange(`${this.usernameAlias}`),\n                value: this.userInput,\n                disabled: this.userInput ? true : false,\n            },\n            {\n                type: 'code',\n                label: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_LABEL),\n                placeholder: I18n.get(Translations.CONFIRM_SIGN_UP_CODE_PLACEHOLDER),\n                required: true,\n                hint: (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))),\n                handleInputChange: this.handleFormFieldInputChange('code'),\n            },\n        ];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                if (newField.type === 'code') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.CONFIRM_SIGN_UP_LOST_CODE), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.resendConfirmCode() }, I18n.get(Translations.CONFIRM_SIGN_UP_RESEND_CODE)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'code':\n                return event => (this.code = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    this.userInput = '';\n                }\n                else {\n                    this.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async resendConfirmCode() {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.resendSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        try {\n            if (!this.userInput)\n                throw new Error(Translations.EMPTY_USERNAME);\n            this.userInput = this.userInput.trim();\n            await Auth.resendSignUp(this.userInput);\n            this.handleAuthStateChange(AuthState.ConfirmSignUp);\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async confirmSignUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.confirmSignUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n        }\n        try {\n            if (!this.userInput)\n                throw new Error(Translations.EMPTY_USERNAME);\n            this.userInput = this.userInput.trim();\n            const confirmSignUpResult = await Auth.confirmSignUp(this.userInput, this.code);\n            if (!confirmSignUpResult) {\n                throw new Error(I18n.get(Translations.CONFIRM_SIGN_UP_FAILED));\n            }\n            if (this._signUpAttrs && this._signUpAttrs.password && this._signUpAttrs.password !== '') {\n                // Auto sign in user if password is available from previous workflow\n                await handleSignIn(this.userInput, this._signUpAttrs.password, this.handleAuthStateChange);\n            }\n            else {\n                this.handleAuthStateChange(AuthState.SignIn);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), submitButtonText: I18n.get(this.submitButtonText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"div\", null, h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)))) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"],\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst logger = new Logger('ForgotPassword');\nconst AmplifyForgotPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.RESET_YOUR_PASSWORD;\n        /** The text displayed inside of the send code button for the form */\n        this.sendButtonText = Translations.SEND_CODE;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.SUBMIT;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [];\n        /** The function called when making a request to reset password */\n        this.handleSend = event => this.send(event);\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.submit(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        this.delivery = null;\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.newFormFields = [];\n        this.forgotPasswordAttrs = {\n            userInput: '',\n            password: '',\n            code: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.newFormFields.push(newField);\n            });\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'forgot-password-email-input',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'forgot-password-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'forgot-password-username-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.forgotPasswordAttrs.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n            case 'code':\n                return event => (this.forgotPasswordAttrs[fieldType] = event.target.value);\n            default:\n                return;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n            case 'code':\n                if (field.value === undefined) {\n                    formAttributes[field.type] = '';\n                }\n                else {\n                    formAttributes[field.type] = field.value;\n                }\n                break;\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async send(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.forgotPasswordAttrs.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n                break;\n        }\n        try {\n            const data = await Auth.forgotPassword(this.forgotPasswordAttrs.userInput.trim());\n            logger.debug(data);\n            this.newFormFields = [\n                {\n                    type: 'code',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('code'),\n                    inputProps: {\n                        'data-test': 'forgot-password-code-input',\n                    },\n                },\n                {\n                    type: 'password',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('password'),\n                    label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                    placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                },\n            ];\n            this.delivery = data.CodeDeliveryDetails;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async submit(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.forgotPasswordSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const { userInput, code, password } = this.forgotPasswordAttrs;\n            const data = await Auth.forgotPasswordSubmit(userInput, code, password);\n            logger.debug(data);\n            this.handleAuthStateChange(AuthState.SignIn);\n            this.delivery = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        const submitFn = this.delivery ? event => this.handleSubmit(event) : event => this.handleSend(event);\n        const submitButtonText = this.delivery ? this.submitButtonText : this.sendButtonText;\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: submitFn, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"forgot-password-back-to-sign-in-link\" }, I18n.get(Translations.BACK_TO_SIGN_IN)), testDataPrefix: 'forgot-password', submitButtonText: I18n.get(submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\n\nconst logger$1 = new ConsoleLogger('amplify-require-new-password');\nconst AmplifyRequireNewPassword = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The header text of the forgot password section */\n        this.headerText = Translations.CHANGE_PASSWORD;\n        /** The text displayed inside of the submit button for the form */\n        this.submitButtonText = Translations.CHANGE_PASSWORD_ACTION;\n        /** The function called when submitting a new password */\n        this.handleSubmit = event => this.completeNewPassword(event);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** The form fields displayed inside of the forgot password form */\n        this.formFields = [\n            {\n                type: AuthFormField.Password,\n                required: true,\n                handleInputChange: event => this.handlePasswordChange(event),\n                label: I18n.get(Translations.NEW_PASSWORD_LABEL),\n                placeholder: I18n.get(Translations.NEW_PASSWORD_PLACEHOLDER),\n                inputProps: {\n                    'data-test': 'require-new-password-password-input',\n                },\n            },\n        ];\n        this.loading = false;\n        this.requiredAttributes = {};\n        this.newFormFields = this.formFields;\n    }\n    userHandler() {\n        this.setCurrentUser();\n    }\n    handleRequiredAttributeInputChange(attribute, event) {\n        this.requiredAttributes[attribute] = event.target.value;\n    }\n    async setCurrentUser() {\n        if (!this.user) {\n            // Check for authenticated user\n            try {\n                const user = await Auth.currentAuthenticatedUser();\n                if (user)\n                    this.currentUser = user;\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n        else {\n            this.currentUser = this.user;\n        }\n        if (this.currentUser && this.currentUser.challengeParam && this.currentUser.challengeParam.requiredAttributes) {\n            const userRequiredAttributes = this.currentUser.challengeParam.requiredAttributes;\n            const requiredAttributesMap = getRequiredAttributesMap();\n            userRequiredAttributes.forEach((attribute) => {\n                const formField = {\n                    type: attribute,\n                    required: true,\n                    label: requiredAttributesMap[attribute].label,\n                    placeholder: requiredAttributesMap[attribute].placeholder,\n                    handleInputChange: event => this.handleRequiredAttributeInputChange(attribute, event),\n                    inputProps: {\n                        'data-test': `require-new-password-${attribute}-input`,\n                    },\n                };\n                this.newFormFields = [...this.newFormFields, formField];\n            });\n        }\n    }\n    componentWillLoad() {\n        return this.setCurrentUser();\n    }\n    handlePasswordChange(event) {\n        this.password = event.target.value;\n    }\n    async completeNewPassword(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.completeNewPassword !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const user = await Auth.completeNewPassword(this.currentUser, this.password, this.requiredAttributes);\n            logger$1.debug('complete new password', user);\n            switch (user.challengeName) {\n                case ChallengeName.SMSMFA:\n                    this.handleAuthStateChange(AuthState.ConfirmSignIn, user);\n                    break;\n                case ChallengeName.MFASetup:\n                    logger$1.debug('TOTP setup', user.challengeParam);\n                    this.handleAuthStateChange(AuthState.TOTPSetup, user);\n                    break;\n                default:\n                    await checkContact(user, this.handleAuthStateChange);\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, loading: this.loading, secondaryFooterContent: h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn) }, I18n.get(Translations.BACK_TO_SIGN_IN)), submitButtonText: I18n.get(this.submitButtonText) }, h(\"amplify-auth-fields\", { formFields: this.newFormFields }))));\n    }\n    static get watchers() { return {\n        \"user\": [\"userHandler\"]\n    }; }\n};\n\nconst amplifySignInCss = \":host{--footer-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--footer-font-family:var(--amplify-font-family);--font-weight:var(--amplify-font-weight)}.sign-in-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-in-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-in-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-in-form-footer amplify-button{margin-bottom:0}}.sign-in-form-footer *+*{margin-bottom:15px}\";\n\nconst AmplifySignIn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign in form is submitted */\n        this.handleSubmit = event => this.signIn(event);\n        /** Used for header text in sign in component */\n        this.headerText = Translations.SIGN_IN_HEADER_TEXT;\n        /** Used for the submit button text in sign in component */\n        this.submitButtonText = Translations.SIGN_IN_ACTION;\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Hides the sign up link */\n        this.hideSignUp = false;\n        this.newFormFields = [];\n        /* Whether or not the sign-in component is loading */\n        this.loading = false;\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.signInAttributes = {\n            userInput: '',\n            password: '',\n        };\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n            case 'email':\n                return event => (this.signInAttributes.userInput = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            case 'password':\n                return event => (this.signInAttributes.password = event.target.value);\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    async signIn(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        this.loading = true;\n        switch (this.usernameAlias) {\n            case 'phone_number':\n                try {\n                    this.signInAttributes.userInput = composePhoneNumberInput(this.phoneNumber);\n                }\n                catch (error) {\n                    dispatchToastHubEvent(error);\n                }\n        }\n        const username = this.signInAttributes.userInput.trim();\n        await handleSignIn(username, this.signInAttributes.password, this.handleAuthStateChange);\n        this.loading = false;\n    }\n    buildDefaultFormFields() {\n        const formFieldInputs = [];\n        switch (this.usernameAlias) {\n            case 'email':\n                formFieldInputs.push({\n                    type: 'email',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('email'),\n                    inputProps: {\n                        'data-test': 'sign-in-email-input',\n                    },\n                });\n                break;\n            case 'phone_number':\n                formFieldInputs.push({\n                    type: 'phone_number',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                    inputProps: {\n                        'data-test': 'sign-in-phone-number-input',\n                    },\n                });\n                break;\n            case 'username':\n            default:\n                formFieldInputs.push({\n                    type: 'username',\n                    required: true,\n                    handleInputChange: this.handleFormFieldInputChange('username'),\n                    inputProps: {\n                        'data-test': 'sign-in-username-input',\n                    },\n                });\n                break;\n        }\n        formFieldInputs.push({\n            type: 'password',\n            hint: (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))),\n            required: true,\n            handleInputChange: this.handleFormFieldInputChange('password'),\n            inputProps: {\n                'data-test': 'sign-in-password-input',\n            },\n        });\n        this.newFormFields = [...formFieldInputs];\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                // TODO: handle hint better\n                if (newField.type === 'password') {\n                    newField['hint'] = isHintValid(newField) ? (h(\"div\", null, I18n.get(Translations.FORGOT_PASSWORD_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.ForgotPassword), \"data-test\": \"sign-in-forgot-password-link\" }, I18n.get(Translations.RESET_PASSWORD_TEXT)))) : (newField['hint']);\n                }\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(newField, this.signInAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n            case 'email':\n                if (field.value === undefined) {\n                    formAttributes.userInput = '';\n                }\n                else {\n                    formAttributes.userInput = field.value;\n                }\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n        }\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-in' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"slot\", { name: \"federated-buttons\" }, h(\"amplify-federated-buttons\", { handleAuthStateChange: this.handleAuthStateChange, federated: this.federated })), !isEmpty(this.federated) && h(\"amplify-strike\", null, \"or\"), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { slot: \"amplify-form-section-footer\", class: \"sign-in-form-footer\" }, h(\"slot\", { name: \"footer\" }, h(\"slot\", { name: \"secondary-footer-content\" }, !this.hideSignUp ? (h(\"span\", null, I18n.get(Translations.NO_ACCOUNT_TEXT), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignUp), \"data-test\": \"sign-in-create-account-link\" }, I18n.get(Translations.CREATE_ACCOUNT_TEXT)))) : (h(\"span\", null))), h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", disabled: this.loading, \"data-test\": \"sign-in-sign-in-button\" }, this.loading ? h(\"amplify-loading-spinner\", null) : h(\"span\", null, I18n.get(this.submitButtonText)))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignIn.style = amplifySignInCss;\n\nconst amplifySignUpCss = \":host{--footer-font-family:var(--amplify-font-family);--footer-font-size:var(--amplify-text-sm);--footer-color:var(--amplify-grey);--font-weight:var(--amplify-font-weight)}.sign-up-form-footer{font-family:var(--footer-font-family);font-size:var(--footer-font-size);color:var(--footer-color);font-weight:--font-weight;display:-ms-flexbox;display:flex;-ms-flex-direction:column-reverse;flex-direction:column-reverse;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.sign-up-form-footer amplify-button{margin-bottom:0.625rem}@media (min-width: 672px){.sign-up-form-footer{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:baseline;align-items:baseline}.sign-up-form-footer amplify-button{margin-bottom:0}}.sign-up-form-footer *+*{margin-bottom:15px}\";\n\nconst AmplifySignUp = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when sign up form is submitted */\n        this.handleSubmit = event => this.signUp(event);\n        /** Used for header text in sign up component */\n        this.headerText = Translations.SIGN_UP_HEADER_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.submitButtonText = Translations.SIGN_UP_SUBMIT_BUTTON_TEXT;\n        /** Used for the submit button text in sign up component */\n        this.haveAccountText = Translations.SIGN_UP_HAVE_ACCOUNT_TEXT;\n        /** Text used for the sign in hyperlink */\n        this.signInText = Translations.SIGN_IN_TEXT;\n        /**\n         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\n         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\n         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n         * ```\n         * [\n         *  {\n         *    type: string,\n         *    label: string,\n         *    placeholder: string,\n         *    hint: string | Functional Component | null,\n         *    required: boolean\n         *  }\n         * ]\n         * ```\n         */\n        this.formFields = [];\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */\n        this.usernameAlias = 'username';\n        // private userInput: string | PhoneNumberInterface;\n        this.newFormFields = [];\n        this.phoneNumber = {\n            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,\n            phoneNumberValue: null,\n        };\n        this.loading = false;\n        this.signUpAttributes = {\n            username: '',\n            password: '',\n            attributes: {},\n        };\n    }\n    handleFormFieldInputChange(fieldType) {\n        switch (fieldType) {\n            case 'username':\n                return event => (this.signUpAttributes.username = event.target.value);\n            case 'password':\n                return event => (this.signUpAttributes.password = event.target.value);\n            case 'email':\n                return event => (this.signUpAttributes.attributes.email = event.target.value);\n            case 'phone_number':\n                return event => handlePhoneNumberChange(event, this.phoneNumber);\n            default:\n                return event => (this.signUpAttributes.attributes[fieldType] = event.target.value);\n        }\n    }\n    handleFormFieldInputWithCallback(event, field) {\n        const fnToCall = field['handleInputChange']\n            ? field['handleInputChange']\n            : (event, cb) => {\n                cb(event);\n            };\n        const callback = this.handleFormFieldInputChange(field.type);\n        fnToCall(event, callback.bind(this));\n    }\n    // TODO: Add validation\n    // TODO: Prefix\n    async signUp(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (!Auth || typeof Auth.signUp !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        if (this.phoneNumber.phoneNumberValue) {\n            try {\n                this.signUpAttributes.attributes.phone_number = composePhoneNumberInput(this.phoneNumber);\n            }\n            catch (error) {\n                dispatchToastHubEvent(error);\n            }\n        }\n        switch (this.usernameAlias) {\n            case 'email':\n            case 'phone_number':\n                this.signUpAttributes.username = this.signUpAttributes.attributes[this.usernameAlias];\n                break;\n        }\n        try {\n            if (!this.signUpAttributes.username) {\n                throw new Error(Translations.EMPTY_USERNAME);\n            }\n            if (this.signUpAttributes.username.indexOf(' ') >= 0) {\n                throw new Error(Translations.USERNAME_REMOVE_WHITESPACE);\n            }\n            if (this.signUpAttributes.password !== this.signUpAttributes.password.trim()) {\n                throw new Error(Translations.PASSWORD_REMOVE_WHITESPACE);\n            }\n            const data = await Auth.signUp(this.signUpAttributes);\n            if (!data) {\n                throw new Error(Translations.SIGN_UP_FAILED);\n            }\n            if (data.userConfirmed) {\n                await handleSignIn(this.signUpAttributes.username, this.signUpAttributes.password, this.handleAuthStateChange);\n            }\n            else {\n                const signUpAttrs = Object.assign({}, this.signUpAttributes);\n                this.handleAuthStateChange(AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), { signUpAttrs }));\n            }\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    buildDefaultFormFields() {\n        switch (this.usernameAlias) {\n            case 'email':\n                this.newFormFields = [\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n            case 'phone_number':\n                this.newFormFields = [\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                        },\n                    },\n                ];\n                break;\n            case 'username':\n            default:\n                this.newFormFields = [\n                    {\n                        type: 'username',\n                        placeholder: I18n.get(Translations.SIGN_UP_USERNAME_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('username'),\n                        inputProps: {\n                            'data-test': 'sign-up-username-input',\n                        },\n                    },\n                    {\n                        type: 'password',\n                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('password'),\n                        inputProps: {\n                            'data-test': 'sign-up-password-input',\n                        },\n                    },\n                    {\n                        type: 'email',\n                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('email'),\n                        inputProps: {\n                            'data-test': 'sign-up-email-input',\n                        },\n                    },\n                    {\n                        type: 'phone_number',\n                        required: true,\n                        handleInputChange: this.handleFormFieldInputChange('phone_number'),\n                        inputProps: {\n                            'data-test': 'sign-up-phone-number-input',\n                        },\n                    },\n                ];\n                break;\n        }\n    }\n    buildFormFields() {\n        if (this.formFields.length === 0) {\n            this.buildDefaultFormFields();\n        }\n        else {\n            const newFields = [];\n            this.formFields.forEach(field => {\n                const newField = Object.assign({}, field);\n                newField['handleInputChange'] = event => this.handleFormFieldInputWithCallback(event, field);\n                this.setFieldValue(field, this.signUpAttributes);\n                newFields.push(newField);\n            });\n            this.newFormFields = newFields;\n        }\n    }\n    setFieldValue(field, formAttributes) {\n        switch (field.type) {\n            case 'username':\n                if (field.value === undefined) {\n                    formAttributes.username = '';\n                }\n                else {\n                    formAttributes.username = field.value;\n                }\n                break;\n            case 'password':\n                if (field.value === undefined) {\n                    formAttributes.password = '';\n                }\n                else {\n                    formAttributes.password = field.value;\n                }\n                break;\n            case 'email':\n                formAttributes.attributes.email = field.value;\n                break;\n            case 'phone_number':\n                if (field.dialCode) {\n                    this.phoneNumber.countryDialCodeValue = field.dialCode;\n                }\n                this.phoneNumber.phoneNumberValue = field.value;\n                break;\n            default:\n                formAttributes.attributes[field.type] = field.value;\n                break;\n        }\n    }\n    componentWillLoad() {\n        checkUsernameAlias(this.usernameAlias);\n        this.buildFormFields();\n    }\n    formFieldsHandler() {\n        this.buildFormFields();\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { headerText: I18n.get(this.headerText), handleSubmit: this.handleSubmit, testDataPrefix: 'sign-up' }, h(\"div\", { slot: \"subtitle\" }, h(\"slot\", { name: \"header-subtitle\" })), h(\"amplify-auth-fields\", { formFields: this.newFormFields }), h(\"div\", { class: \"sign-up-form-footer\", slot: \"amplify-form-section-footer\" }, h(\"slot\", { name: \"footer\" }, h(\"slot\", { name: \"secondary-footer-content\" }, h(\"span\", null, I18n.get(this.haveAccountText), ' ', h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignIn), \"data-test\": \"sign-up-sign-in-link\" }, I18n.get(this.signInText)))), h(\"slot\", { name: \"primary-footer-content\" }, h(\"amplify-button\", { type: \"submit\", \"data-test\": \"sign-up-create-account-button\" }, this.loading ? h(\"amplify-loading-spinner\", null) : h(\"span\", null, I18n.get(this.submitButtonText)))))))));\n    }\n    static get watchers() { return {\n        \"formFields\": [\"formFieldsHandler\"]\n    }; }\n};\nAmplifySignUp.style = amplifySignUpCss;\n\nconst logger$2 = new Logger('AmplifyVerifyContact');\nconst AmplifyVerifyContact = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Authentication state handler */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.loading = false;\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        this.verifyAttr ? this.submit(this.code) : this.verify(this.contact);\n    }\n    async submit(code) {\n        const attr = this.verifyAttr;\n        if (!Auth || typeof Auth.verifyCurrentUserAttributeSubmit !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttributeSubmit(attr, code);\n            logger$2.debug(data);\n            this.handleAuthStateChange(AuthState.SignedIn, this.user);\n            this.verifyAttr = null;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    async verify(contact) {\n        if (!contact) {\n            logger$2.error('Neither Email nor Phone Number selected');\n            return;\n        }\n        if (!Auth || typeof Auth.verifyCurrentUserAttribute !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const data = await Auth.verifyCurrentUserAttribute(contact);\n            logger$2.debug(data);\n            this.verifyAttr = contact;\n        }\n        catch (error) {\n            dispatchToastHubEvent(error);\n            logger$2.error(error);\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    handleInputChange(event) {\n        const inputName = event.target.name;\n        if (inputName === 'code') {\n            this.code = event.target.value;\n        }\n        else if (inputName === 'contact') {\n            this.contact = event.target.value;\n        }\n    }\n    renderSubmit() {\n        return (h(\"div\", null, h(\"amplify-input\", { inputProps: {\n                autocomplete: 'off',\n                'data-test': 'verify-contact-code-input',\n            }, name: \"code\", placeholder: I18n.get(Translations.CODE_PLACEHOLDER), handleInputChange: event => this.handleInputChange(event) })));\n    }\n    renderVerify() {\n        const user = this.user;\n        if (!user) {\n            logger$2.debug('No user to verify');\n            return null;\n        }\n        const { unverified } = user;\n        if (!unverified) {\n            logger$2.debug('Unverified variable does not exist on user');\n            return null;\n        }\n        const { email, phone_number } = unverified;\n        return (h(\"div\", null, email && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_EMAIL_LABEL), key: \"email\", name: \"contact\", value: \"email\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-email-radio',\n            } })), phone_number && (h(\"amplify-radio-button\", { label: I18n.get(Translations.VERIFY_CONTACT_PHONE_LABEL), key: \"phone_number\", name: \"contact\", value: \"phone_number\", handleInputChange: event => this.handleInputChange(event), inputProps: {\n                'data-test': 'verify-contact-phone-number-radio',\n            } }))));\n    }\n    render() {\n        return (h(Host, null, h(\"amplify-form-section\", { handleSubmit: event => this.handleSubmit(event), headerText: I18n.get(Translations.VERIFY_CONTACT_HEADER_TEXT), loading: this.loading, secondaryFooterContent: h(\"span\", null, h(\"amplify-button\", { variant: \"anchor\", onClick: () => this.handleAuthStateChange(AuthState.SignedIn, this.user), \"data-test\": \"verify-contact-skip-link\" }, \"Skip\")), submitButtonText: this.verifyAttr\n                ? I18n.get(Translations.VERIFY_CONTACT_SUBMIT_LABEL)\n                : I18n.get(Translations.VERIFY_CONTACT_VERIFY_LABEL) }, this.verifyAttr ? this.renderSubmit() : this.renderVerify())));\n    }\n};\n\nexport { AmplifyConfirmSignIn as amplify_confirm_sign_in, AmplifyConfirmSignUp as amplify_confirm_sign_up, AmplifyForgotPassword as amplify_forgot_password, AmplifyRequireNewPassword as amplify_require_new_password, AmplifySignIn as amplify_sign_in, AmplifySignUp as amplify_sign_up, AmplifyVerifyContact as amplify_verify_contact };\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-amazon-button_5.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACP;AACE;AACjB;AACsB;AAC2B;AAChB;;AAE1E,mBAAmB,+DAAa;AAChC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,iBAAiB,sDAAI,WAAW,sDAAI,0CAA0C,sDAAI;AAClF,gCAAgC,wDAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAI,4BAA4B,kCAAkC;AACxF,gDAAgD,sDAAI;AACpD,2CAA2C,yDAAS;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,4CAA4C,wDAAe,kBAAkB,qBAAqB;AAClG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,4DAAC,4BAA4B,qEAAqE,EAAE,4DAAC,YAAY,6DAA6D,GAAG,sDAAI,KAAK,2DAAY;AACtN;AACA;;AAEA,qBAAqB,+DAAa;AAClC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,qCAAqC,sDAA4B;AACjE;AACA,qEAAqE;AACrE,mBAAmB,WAAW,EAAE,GAAG,sDAAI;AACvC,qEAAqE;AACrE,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yCAAyC,wDAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sDAAI;AAC9B;AACA;AACA,qBAAqB,GAAG,wBAAwB;AAChD,oDAAoD,sDAAI;AACxD,+CAA+C,yDAAS;AACxD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,4BAA4B,mEAAmE,EAAE,4DAAC,YAAY,mFAAmF,GAAG,sDAAI,KAAK,2DAAY;AAC1O;AACA;;AAEA,qBAAqB,+DAAa;AAClC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA,iBAAiB,sDAAI,WAAW,sDAAI,0CAA0C,sDAAI;AAClF,gCAAgC,wDAAoB;AACpD;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA,sBAAsB,sDAAI,8BAA8B,iCAAiC;AACzF,gDAAgD,sDAAI;AACpD,2CAA2C,yDAAS;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA,gDAAgD,wDAAe,kBAAkB,uBAAuB;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,4DAAC,4BAA4B,yEAAyE,EAAE,4DAAC,YAAY,6EAA6E,GAAG,sDAAI,KAAK,2DAAY;AAC1O;AACA;;AAEA,qBAAqB,+DAAa;AAClC;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,qCAAqC,sDAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sDAAI,WAAW,sDAAI,0CAA0C,sDAAI;AAClF,gCAAgC,wDAAoB;AACpD;AACA;AACA,4CAA4C,wDAAe,kBAAkB,qBAAqB;AAClG;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA,kBAAkB,sDAAI,4BAA4B,8BAA8B;AAChF;AACA;AACA;AACA,aAAa;AACb,4CAA4C,sDAAI;AAChD;AACA,2CAA2C,yDAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,4BAA4B,qEAAqE,EAAE,4DAAC,YAAY,2EAA2E,GAAG,sDAAI,KAAK,2DAAY;AACpO;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAI;AACZ;AACA;AACA,gBAAgB,4DAAC,4BAA4B,mEAAmE,uBAAuB,sDAAI,KAAK,2DAAY;AAC5J;AACA;;AAEgP","file":"13.js","sourcesContent":["import { r as registerInstance, h } from './index-3fb5c139.js';\nimport { ConsoleLogger, I18n } from '@aws-amplify/core';\nimport { A as AuthState } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, j as AUTH_SOURCE_KEY } from './constants-d1abe7de.js';\nimport { d as dispatchAuthStateChangeEvent } from './helpers-4afef5ab.js';\n\nconst logger = new ConsoleLogger('amplify-amazon-button');\nconst AmplifyAmazonButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.federatedSignIn = response => {\n            const { access_token, expires_in } = response;\n            if (!access_token) {\n                return;\n            }\n            if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {\n                throw new Error(NO_AUTH_MODULE_FOUND);\n            }\n            const date = new Date();\n            const expires_at = expires_in * 1000 + date.getTime();\n            window['amazon'].Login.retrieveProfile(async (userInfo) => {\n                if (!userInfo.success) {\n                    return logger.debug('Get user Info failed');\n                }\n                const user = {\n                    name: userInfo.profile.Name,\n                    email: userInfo.profile.PrimaryEmail,\n                };\n                await Auth.federatedSignIn('amazon', { token: access_token, expires_at }, user);\n                const authenticatedUser = await Auth.currentAuthenticatedUser();\n                this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);\n            });\n        };\n    }\n    /**\n     * @see https://developer.amazon.com/docs/login-with-amazon/install-sdk-javascript.html\n     */\n    signInWithAmazon(event) {\n        event.preventDefault();\n        window['amazon'].Login.setClientId(this.clientId);\n        window['amazon'].Login.authorize({ scope: 'profile' }, response => {\n            if (response.error) {\n                return logger.debug('Failed to login with amazon: ' + response.error);\n            }\n            try {\n                window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'amazon' }));\n            }\n            catch (e) {\n                logger.debug('Failed to cache auth source into localStorage', e);\n            }\n            this.federatedSignIn(response);\n        });\n    }\n    render() {\n        return (h(\"amplify-sign-in-button\", { onClick: event => this.signInWithAmazon(event), provider: \"amazon\" }, h(\"script\", { src: \"https://assets.loginwithamazon.com/sdk/na/login1.js\" }), I18n.get(Translations.SIGN_IN_WITH_AMAZON)));\n    }\n};\n\nconst logger$1 = new ConsoleLogger('amplify-auth0-button');\nconst AmplifyAuth0Button = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Auth state change handler for this component */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.handleLoad = () => {\n            // @ts-ignore Property 'auth0' does not exist on type '{}'.\n            const { oauth = {} } = Auth.configure();\n            // @ts-ignore Property 'auth0' does not exist on type '{}'.\n            const { config = oauth.auth0 } = this;\n            if (!config) {\n                logger$1.debug('Auth0 is not configured');\n                return;\n            }\n            logger$1.debug('auth0 configuration', config);\n            if (!this._auth0) {\n                this._auth0 = new window['auth0'].WebAuth(config);\n            }\n            this._auth0.parseHash((err, authResult) => {\n                if (err) {\n                    logger$1.debug('Failed to parse the url for Auth0', err);\n                    return;\n                }\n                if (!authResult) {\n                    logger$1.debug('Auth0 found no authResult in hash');\n                    return;\n                }\n                const payload = {\n                    provider: 'auth0',\n                    opts: {\n                        returnTo: config.returnTo,\n                        clientID: config.clientID,\n                        federated: config.federated,\n                    },\n                };\n                try {\n                    localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify(payload));\n                }\n                catch (e) {\n                    logger$1.debug('Failed to cache auth source into localStorage', e);\n                }\n                this._auth0.client.userInfo(authResult.accessToken, async (err, user) => {\n                    let username = undefined;\n                    let email = undefined;\n                    if (err) {\n                        logger$1.debug('Failed to get the user info', err);\n                    }\n                    else {\n                        username = user.name;\n                        email = user.email;\n                    }\n                    await Auth.federatedSignIn(config.domain, {\n                        token: authResult.idToken,\n                        expires_at: authResult.expiresIn * 1000 + new Date().getTime(),\n                    }, { name: username, email });\n                    const authenticatedUser = await Auth.currentAuthenticatedUser();\n                    this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);\n                });\n            });\n        };\n    }\n    signInWithAuth0(event) {\n        event.preventDefault();\n        if (!this._auth0) {\n            throw new Error('the auth0 client is not configured');\n        }\n        this._auth0.authorize();\n    }\n    render() {\n        return (h(\"amplify-sign-in-button\", { onClick: event => this.signInWithAuth0(event), provider: \"auth0\" }, h(\"script\", { onLoad: this.handleLoad, src: \"https://cdn.auth0.com/js/auth0/9.11/auth0.min.js\" }), I18n.get(Translations.SIGN_IN_WITH_AUTH0)));\n    }\n};\n\nconst logger$2 = new ConsoleLogger('amplify-facebook-button');\nconst AmplifyFacebookButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.federatedSignIn = authResponse => {\n            const { accessToken, expiresIn } = authResponse;\n            if (!accessToken) {\n                return;\n            }\n            if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {\n                throw new Error(NO_AUTH_MODULE_FOUND);\n            }\n            const date = new Date();\n            const expires_at = expiresIn * 1000 + date.getTime();\n            const fields = 'name,email';\n            window['FB'].api('/me', { fields }, async (response) => {\n                const user = {\n                    name: response.name,\n                    email: response.email,\n                };\n                await Auth.federatedSignIn('facebook', { token: accessToken, expires_at }, user);\n                const authenticatedUser = await Auth.currentAuthenticatedUser();\n                this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);\n            });\n        };\n        this.getLoginStatus = () => {\n            window['FB'].getLoginStatus(response => {\n                try {\n                    window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'facebook' }));\n                }\n                catch (e) {\n                    logger$2.debug('Failed to cache auth source into localStorage', e);\n                }\n                if (response.status === 'connected') {\n                    return this.federatedSignIn(response.authResponse);\n                }\n                this.login();\n            });\n        };\n        this.login = () => {\n            const scope = 'public_profile,email';\n            window['FB'].login(response => {\n                if (response && response.authResponse) {\n                    this.federatedSignIn(response.authResponse);\n                }\n            }, { scope });\n        };\n    }\n    /**\n     * @see https://developers.facebook.com/docs/javascript/reference/FB.init/v5.0\n     */\n    signInWithFacebook(event) {\n        event.preventDefault();\n        window['FB'].init({\n            appId: this.appId,\n            cookie: true,\n            xfbml: false,\n            version: 'v5.0',\n        });\n        this.getLoginStatus();\n    }\n    render() {\n        return (h(\"amplify-sign-in-button\", { onClick: event => this.signInWithFacebook(event), provider: \"facebook\" }, h(\"script\", { async: true, defer: true, src: \"https://connect.facebook.net/en_US/sdk.js\" }), I18n.get(Translations.SIGN_IN_WITH_FACEBOOK)));\n    }\n};\n\nconst logger$3 = new ConsoleLogger('amplify-google-button');\nconst AmplifyGoogleButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Auth state change handler for this component\n         * e.g. SignIn -> 'Create Account' link -> SignUp\n         */\n        this.handleAuthStateChange = dispatchAuthStateChangeEvent;\n        this.handleError = error => {\n            console.error(error);\n        };\n        /**\n         * @see https://developers.google.com/identity/sign-in/web/build-button#building_a_button_with_a_custom_graphic\n         */\n        this.handleLoad = () => {\n            window['gapi'].load('auth2');\n        };\n        this.handleUser = async (user) => {\n            if (!Auth || typeof Auth.federatedSignIn !== 'function' || typeof Auth.currentAuthenticatedUser !== 'function') {\n                throw new Error(NO_AUTH_MODULE_FOUND);\n            }\n            try {\n                window.localStorage.setItem(AUTH_SOURCE_KEY, JSON.stringify({ provider: 'google' }));\n            }\n            catch (e) {\n                logger$3.debug('Failed to cache auth source into localStorage', e);\n            }\n            const { id_token, expires_at } = user.getAuthResponse();\n            const profile = user.getBasicProfile();\n            await Auth.federatedSignIn('google', { token: id_token, expires_at }, {\n                email: profile.getEmail(),\n                name: profile.getName(),\n                picture: profile.getImageUrl(),\n            });\n            const authenticatedUser = await Auth.currentAuthenticatedUser();\n            try {\n                this.handleAuthStateChange(AuthState.SignedIn, authenticatedUser);\n            }\n            catch (error) {\n                this.handleError(error);\n            }\n        };\n    }\n    getAuthInstance() {\n        if (window['gapi'] && window['gapi'].auth2) {\n            return (window['gapi'].auth2.getAuthInstance() ||\n                window['gapi'].auth2.init({\n                    client_id: this.clientId,\n                    cookiepolicy: 'single_host_origin',\n                    scope: 'profile email openid',\n                }));\n        }\n        return null;\n    }\n    signInWithGoogle(event) {\n        event.preventDefault();\n        this.getAuthInstance()\n            .signIn()\n            .then(this.handleUser)\n            .catch(this.handleError);\n    }\n    render() {\n        return (h(\"amplify-sign-in-button\", { onClick: event => this.signInWithGoogle(event), provider: \"google\" }, h(\"script\", { onLoad: this.handleLoad, src: \"https://apis.google.com/js/api:client.js\" }), I18n.get(Translations.SIGN_IN_WITH_GOOGLE)));\n    }\n};\n\nconst AmplifyOAuthButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Federated credentials & configuration. */\n        this.config = {};\n    }\n    signInWithOAuth(event) {\n        event.preventDefault();\n        Auth.federatedSignIn();\n    }\n    render() {\n        return (h(\"amplify-sign-in-button\", { onClick: event => this.signInWithOAuth(event), provider: \"oauth\" }, this.config.label || I18n.get(Translations.SIGN_IN_WITH_AWS)));\n    }\n};\n\nexport { AmplifyAmazonButton as amplify_amazon_button, AmplifyAuth0Button as amplify_auth0_button, AmplifyFacebookButton as amplify_facebook_button, AmplifyGoogleButton as amplify_google_button, AmplifyOAuthButton as amplify_oauth_button };\n"],"sourceRoot":"webpack:///"}